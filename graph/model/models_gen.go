// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Asset struct {
	AssetType AssetType `json:"assetType"`
	ID        uint      `json:"id"`
	Name      string    `json:"name"`
	URL       string    `json:"url"`
}

type Container struct {
	Advertisements []*Asset `json:"advertisements"`
	ID             uint     `json:"id"`
	Images         []*Asset `json:"images"`
	Name           string   `json:"name"`
	Videos         []*Video `json:"videos"`
}

type Mutation struct {
}

type NewAsset struct {
	AssetType   AssetType `json:"assetType"`
	ContainerID uint      `json:"containerID"`
	Name        string    `json:"name"`
	URL         string    `json:"url"`
	VideoID     uint      `json:"videoID"`
}

type NewVideo struct {
	ContainerID    uint      `json:"containerID"`
	Description    string    `json:"description"`
	ExpirationDate string    `json:"expirationDate"`
	PlaybackURL    string    `json:"playbackUrl"`
	Title          string    `json:"title"`
	VideoType      VideoType `json:"videoType"`
}

type Query struct {
}

type UpdateAsset struct {
	AssetType   AssetType `json:"assetType"`
	ContainerID uint      `json:"containerID"`
	ID          uint      `json:"id"`
	Name        string    `json:"name"`
	URL         string    `json:"url"`
	VideoID     uint      `json:"videoID"`
}

type UpdateVideo struct {
	ContainerID    uint      `json:"containerID"`
	Description    string    `json:"description"`
	ExpirationDate string    `json:"expirationDate"`
	ID             uint      `json:"id"`
	PlaybackURL    string    `json:"playbackUrl"`
	Title          string    `json:"title"`
	VideoType      VideoType `json:"videoType"`
}

type Video struct {
	Assets         []uint    `json:"assets"`
	Description    string    `json:"description"`
	ExpirationDate string    `json:"expirationDate"`
	ID             uint      `json:"id"`
	PlaybackURL    string    `json:"playbackUrl"`
	Title          string    `json:"title"`
	VideoType      VideoType `json:"videoType"`
}

type AssetType string

const (
	AssetTypeAdvertisement AssetType = "ADVERTISEMENT"
	AssetTypeImage         AssetType = "IMAGE"
)

var AllAssetType = []AssetType{
	AssetTypeAdvertisement,
	AssetTypeImage,
}

func (e AssetType) IsValid() bool {
	switch e {
	case AssetTypeAdvertisement, AssetTypeImage:
		return true
	}
	return false
}

func (e AssetType) String() string {
	return string(e)
}

func (e *AssetType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AssetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AssetType", str)
	}
	return nil
}

func (e AssetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *AssetType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e AssetType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type VideoType string

const (
	VideoTypeClip    VideoType = "CLIP"
	VideoTypeEpisode VideoType = "EPISODE"
	VideoTypeMovie   VideoType = "MOVIE"
)

var AllVideoType = []VideoType{
	VideoTypeClip,
	VideoTypeEpisode,
	VideoTypeMovie,
}

func (e VideoType) IsValid() bool {
	switch e {
	case VideoTypeClip, VideoTypeEpisode, VideoTypeMovie:
		return true
	}
	return false
}

func (e VideoType) String() string {
	return string(e)
}

func (e *VideoType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VideoType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VideoType", str)
	}
	return nil
}

func (e VideoType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *VideoType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e VideoType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
